1) IPC using popen() and pclose()
  
#include <stdio.h>

int main() {
    FILE *fp;
    char buffer[100];

    fp = popen("ls", "r");
    while (fgets(buffer, sizeof(buffer), fp) != NULL)
        printf("%s", buffer);
    pclose(fp);

    return 0;
}

2) IPC using pipe()

#include <stdio.h>
#include <unistd.h>
#include <string.h>

int main() {
    int fd[2];
    char msg[] = "Hello from parent";
    char buffer[100];
    pipe(fd);

    if (fork() == 0) {
        read(fd[0], buffer, sizeof(buffer));
        printf("Child received: %s\n", buffer);
    } else {
        write(fd[1], msg, strlen(msg) + 1);
    }

    return 0;
}

3)Creating a FIFO / Named Pipe
#include <stdio.h>
#include <sys/stat.h>

int main() {
    mkfifo("myfifo", 0666);
    return 0;
}

4)  Writing to a FIFO / Named Pipe(sendee)
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

int main() {
    int fd;
    char msg[] = "Hello via FIFO";

    fd = open("myfifo", O_WRONLY);
    write(fd, msg, strlen(msg) + 1);
    close(fd);

    return 0;
}

Reader :
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd;
    char buffer[100];

    fd = open("myfifo", O_RDONLY);
    read(fd, buffer, sizeof(buffer));
    printf("Received: %s\n", buffer);
    close(fd);

    return 0;
}
